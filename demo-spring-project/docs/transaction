Транзакцией называется множество операций, выполняемое приложением, которое переводит базу данных из одного корректного
состояния в другое корректное состояние (согласованность) при условии, что транзакция выполнена полностью (атомарность)
и без помех со стороны других транзакций (изоляция).

Акроним ACID - требования к транзакционной системе (например, к СУБД):

Atomicity — Атомарность: гарантирует, что никакая транзакция не будет зафиксирована в системе частично
(она или выполнена полностью, или не будет выполнена совсем)

Consistency — Согласованность: Транзакция, достигающая своего нормального завершения и тем самым фиксирующая
свои результаты, сохраняет согласованность базы данных
(т.е, каждая успешная транзакция по определению фиксирует только допустимые результаты)

Isolation — Изоляция: Во время выполнения транзакции параллельные транзакции не должны оказывать влияния
на её результат (или оказывают в зависимости от уровней изоляции - аномалии)

Durability — Прочность: Изменения, сделанные успешно завершённой транзакцией, не будут отменены из-за какого-либо сбоя системы.

Ситуации, когда корректные транзакции (если выполнять их последовательно) некорректно работают вместе - аномалии одновременного выполнения.
*********************************************************
Аномалии в зависимости от уровней изолированности:
1) Lost update (потерянное обновление)
Ситуация, когда при одновременном изменении одних и тех же данных разными транзакциями,
одно из изменений теряется (перезаписывается другим).

2) Dirty read (грязное чтение)
Чтение данных, добавленных или изменённых транзакцией, которая впоследствии откатится.

3) Non-Repeatable read (неповторяющееся чтение)
Ситуация, когда при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными.
Практический вывод: в транзакции нельзя принимать решения на основании данных, прочитанных предыдущим оператором,
ведь за время между выполнением операторов все может измениться (для Read committed).

4) Phantom reads (фантомное чтение)
Ситуация, когда при повторном чтении в рамках одной транзакции одна и та же выборка дает разные множества строк.

Стандарт SQL описывает 4 уровня изоляции, определяемые списком аномалий:
***********************************************************
Isolation level | Lost update                   | Dirty read | Non-repeatable read | Phantom reads
------------------------------                  ---------------------------------------------------
read uncommited |     -                         |     +      |         +           |      +             не реализован в PostgreSQL
------------------------------                  ---------------------------------------------------
read commited   |     - (в PostgreSQL "+")      |     -      |         +           |      +
------------------------------                  ---------------------------------------------------
repeatable read |     -                         |     -      |         -           |      + (в PostgreSQL "-")
------------------------------                  ---------------------------------------------------
serializable    |     -                         |     -      |         -           |      -

в PostgreSQL по умолчанию Read Committed (а read uncommited не реализован вообще, формально указать можно, но будет работать как Read Committed)
На этом уровне ошибка сериализации возникнуть не может и о повторении транзакций через приложение заботиться не надо.
НО: в PostgreSQL на уровне Read Committed можно потерять  изменения
(пример: если обновление происходит не в одном операторе SQL: сначала данные считала одна транзакция, потом другая,
в первой сделали апдейт и закоммитили, вторая делает тоже самое, но перепишет таким образом результат апдейта первой)

Посмотреть текущий уровень изоляции: SHOW transaction_isolation;

Другие аномалии: несогласованное чтение, несогласованная запись, аномалия только читающей транзакции