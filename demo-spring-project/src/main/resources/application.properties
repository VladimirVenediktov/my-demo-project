server.port=8888
spring.application.name=test-spring-project

#database.jdbcUrl=jdbc:postgresql://localhost:8001/my-test-db?stringtype=unspecified
#database.driverClassName=org.postgresql.Driver
#database.user=USER
#database.password=PASSWORD

# если брать messageSource из автоконфигурации
#spring.messages.basename=messages

# сериализовать даты как timestamp
#spring.jackson.serialization.write-dates-as-timestamps=true

# включить в актуаторе все endpoints (в том числе prometheus)
management.endpoints.web.exposure.include=*
# зададим variable application для prometheus и вывода на дашборд grafana
management.metrics.tags.application=${spring.application.name}

# Security
#security.login=admin
#security.password=admin
#security.roles=ADMIN,USER

# PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/test_database
spring.datasource.username=test_user
spring.datasource.password=123

# Kafka
kafka.enabled=true
kafka.groupId=firstGroup
spring.kafka.bootstrap-servers=localhost:29092

# Rabbit (docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.11-management)
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
# Old style stream
spring.cloud.stream.old.style.enabled=false
#spring.cloud.stream.bindings.output.destination=my-rabbit-exchange
#spring.cloud.stream.bindings.input.group=demo-project
#spring.cloud.stream.bindings.input.destination=my-rabbit-exchange
# Stream cloud stream via function
# явно указываем какие бины (названия методов) использовать для spring cloud stream
spring.cloud.function.definition=push;log

# кастомный флаг вкл/выкл нового функц-го стиля
spring.cloud.stream.function.style.enabled=true

# маппинг названия биндинга (переименовать биндинг в более удобный формат 'input' и далее использовать его)
#spring.cloud.stream.function.bindings.log-in-0=input
#spring.cloud.stream.bindings.input.group=demo-project
#spring.cloud.stream.bindings.input.destination=function-rabbit-exchange

# а так если будет использоваться дефолтный нейминг биндинга (без маппинга выше)
spring.cloud.stream.bindings.log-in-0.group=demo-project
spring.cloud.stream.bindings.log-in-0.destination=function-rabbit-exchange
spring.cloud.stream.bindings.push-out-0.destination=function-rabbit-exchange
# автопубликация каждые 5 сек через Supplier
spring.integration.poller.fixed-delay=5000

# JPA
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# prometheus
management.metrics.export.prometheus.enabled=true
